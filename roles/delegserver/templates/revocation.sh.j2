#!/bin/bash

####################
# DEFAULT VARIABLES
####################

# as a cron job we typically need to set PATH
PATH={{ cron_path }}

# script logs via syslog
logfacility={{ revoke_logfacility }}
logtag={{ revoke_logtag }}

# list of remote frontends used for obtaining CRL and new revoke lists
frontends="{{ crl_frontends }}"
# list of backends used for obtaining CRL
backends="{{ crl_backends }}"
# alias for the backend
backend_alias={{ private_ca_fqdn }}

# permissions of potential webroot files. Note that mktemp ignores umask
perms=0644
# main state directory
revokedir={{ revoke_dir }}
# directory holding new to-be-revoked serials
queuedir={{ revoke_queue_dir }}
# backend facing webroot
privatewebroot={{ revoke_dir_webroot }}
# directory with various data files, will be replaced with new dir
datadir={{ revoke_datadir }}
# prefix for the temp directory used for building the datadir
datadirpfx={{ revoke_datadir_pfx }}
# prefix for the tarball with CRLs and list of revoked entries
tarpfx={{ revoke_tar_pfx }}
# symlink to the latest tarball with CRLs and list of revoked entries
tarlatest=${privatewebroot}/{{ revoke_tar_latest }}

# file inside the tarball with entries not-yet in on any of the CRLs
entries={{ revoke_entries_file }}
# used to create temporary entries files in $revokedir
entriespfx={{ revoke_entries_pfx }}
# extension of CRL-derived entries files
entriesext={{ revoke_entries_extension }}
# name of the CRL pem file
crlpem={{ crl_pem }}
# pubcrl is exposed to public internet
pubwebroot={{ crl_pub_webroot }}
pubcrl=${pubwebroot}/${crlpem}
# file containing entries of the public CRL
pubcrlentries=pubcrl${entriesext}
# crlpfx is used to create the CRL files in $revokedir
crlpfx={{ crl_pfx }}
# file containing entries for all CRLs combined
allcrlentries=${crlpfx}all${entriesext}

# curl settings (connects towards public side of each frontend)
timeout={{ curl_timeout }}
curluser={{ curl_user }}
curlgroup={{ curl_group }}
capath={{ x509_cert_dir }}

# where to find our local backups
cabackupbase={{ ca_backup_home }}
cadir={{ ca_topdir }}


#################
# HELPER METHODS
#################

# logging helper functions, using syslog using logtag and logfacility at
# different loglevels.

debug() {
    logger -t $logtag -p ${logfacility}.debug "DEBUG: $*"
}

info()  {
    logger -t $logtag -p ${logfacility}.info "$*"
}

notice()    {
    logger -t $logtag -p ${logfacility}.notice "$*"
}

warn()  {
    logger -t $logtag -p ${logfacility}.warning "WARNING: $*"
}

error() {
    logger -t $logtag -p ${logfacility}.err "ERROR: $*"
    exit 1
}

# Dump the certificate serials in $1 sorted and uniquefied to $2
dump_serials()  {
    openssl crl -noout -text -in "$1" |\
        sed -n 's/^\s*Serial Number: //p' | sort -u >| "$2" 2> /dev/null
    if [ $? -ne 0 ];then
        # failure here means there is something serious wrong
        error "cannot get certificate serials from \"$1\""
    fi
}

# Returns decimal crlnumber number of CRL $1
get_crlnumber()    {
    # initialize crlnumber to safe value 0
    crlnumber=0
    printf "%d" 0x$(openssl crl -crlnumber -noout -in "$1" |\
        sed -n 's/^crlNumber=//p') 2> /dev/null
    if [ $? -ne 0 ];then
        # failure here means there is something serious wrong
        error "cannot get CRLnumber from \"$1\""
    fi
}

# Quiet diff that only sets the return value and treats a missing file as empty
qdiff() {
    diff -Nq $1 $2 > /dev/null
}

# Compares file $2 against to $1 and sets global variables 'missing' and 'extra'
# extra is how many are $2 that are not in $1, and missing is how many are not
# in $2 that are in $1.
get_missing_extra() {
    # Note: our diff only outputs something when the files differ, so set the
    # defaults here
    missing=0
    extra=0
    eval $(diff --changed-group-format="missing=%dn; extra=%dN" \
                --unchanged-group-format="" "$1" "$2")
    if [ $? -ne 0 ];then
        # failure here means there is something serious wrong
        error "cannot get 'missing' and 'extra' from \"$1\" and \"$2\""
    fi
}


# Runs curl to fetch the public CRLs as $curluser/group. On failure the errors
# are logged as warning.
curl_cmd()  {
    curltmp=$(mktemp ${revokedir}/tmp_curlXXXXXX)
    # NOTE: use -f flag to fail on server errors without printing error page on
    # stdout.
    runuser $curluser -g $curlgroup -l -s /bin/sh -c \
    "curl -fsS \
        --connect-timeout $timeout \
        --capath $capath \
        https://${1}/${crlpem}" 2> $curltmp
    rc=$?
    if [ -s $curltmp ];then
        warn "cURL failed with: $(cat $curltmp)"
    fi
    # Tidy up our temporary error log
    rm -f $curltmp
    return $rc
}

########################
# START OF MAIN PROGRAM
########################

# Get our current backend's FQDN to get to our cafile, which is used to verify
# the CRLs. First try to get the IP address, if that succeeds the FQDN.
my_backend_ip=$(getent -s files hosts $backend_alias|awk '{print $1}')
if [ -z "$my_backend_ip" ];then
    error "cannot find out my backend's IP address"
fi
my_backend_fqdn=$(getent -s files hosts "$my_backend_ip"|awk '{print $2}')
if [ -z "$my_backend_fqdn" ];then
    error "cannot find out my backend's FQDN"
fi
cafile=${cabackupbase}/${my_backend_fqdn}/${cadir}/cacert.pem

# Set umask
umask 0022

# Make sure non-matching *.something just gets removed
shopt -s nullglob

# Do not accept unset variables
set -u

# Create directories when needed
for dir in $revokedir $datadir $queuedir $privatewebroot $pubwebroot;do
    if [ ! -d "$dir" ];then
        mkdir -p $dir
        notice "Created directory \"$dir\""
    fi
done

# Switch to a save working directory
cd $revokedir

# filename of the old local entries file
oldentries=${datadir}/${entries}
# filename of the combined list of entries belonging to all the CRLs
oldallcrlentries=${datadir}/${allcrlentries}
# filename of the entries belonging to the currently publicized CRL
oldpubcrlentries=${datadir}/${pubcrlentries}
# make sure the old datadir has at least an empty entries file
for file in $oldentries $oldallcrlentries $oldpubcrlentries;do
    if [ ! -f $file ];then
        touch $file
    fi
done

# make new data dir, will be used to replace the old datadir
newdatadir=$(mktemp -d ${revokedir}/tmp_${datadirpfx}XXXXXX)
# move there
cd $newdatadir

# keep track of whether a CRL has changed
crlchanged=0

# Remote CRLs
for frontend in $(echo $frontends);do
    crl=${crlpfx}${frontend}.pem
    oldcrl=${datadir}/${crl}
    crlentries=${crlpfx}${frontend}${entriesext}
    # download remote CRL and use it if it succeeds and verifies
    if curl_cmd $frontend > $crl ;then
        # check whether it has changed
        if [ ! -f $oldcrl ] || ! qdiff $oldcrl $crl ; then
            info "Got new CRL for $frontend"
            verify=$(openssl crl -CAfile $cafile -noout -in $crl 2>&1)
            if [ "$verify" = "verify OK" ];then
                dump_serials $crl $crlentries
                crlchanged=1
                # move to next frontend
                continue
            else
                # CRL verify failed: warn and use old one (if applicable)
                warn "ignoring invalid CRL from $frontend: $verify"
                rm -f $crl
            fi
        fi
    else
        # CRL download failed: warn and use old one (if applicable)
        warn "ignoring unreachable frontend $frontend"
        # make sure to remove the failed $crl file
        rm -f $crl
    fi
    # Either failure or unchanged: use old one when available
    if [ -f $oldcrl ];then
        cp -p ${datadir}/{$crl,$crlentries} .
    fi
done

# Local CRLs
for backend in $(echo $backends);do
    crl=${crlpfx}${backend}.pem
    oldcrl=${datadir}/${crl}
    crlentries=${crlpfx}${backend}${entriesext}
    # copy local CRL
    crlsrcfile=${cabackupbase}/${backend}/${cadir}/${crlpem}
    if [ -f $crlsrcfile ];then
        if cp -p $crlsrcfile $crl; then
            # check whether it has changed
            if [ ! -f $oldcrl ] || ! qdiff $oldcrl $crl ; then
                info "Got new CRL for $backend"
                dump_serials $crl $crlentries
                crlchanged=1
                # move to next backend
                continue
            fi
        else
            # Copy failed: warn and use old one (if applicable)
            warn "cannot copy CRL from $crlsrcfile to $crl"
            rm -f $newcrl
        fi
    else
        # No local CRL: ignore and use old one (if applicable), might e.g. be a
        # change of backend.
        info "ignoring missing CRL from backend $backend"
    fi
    # Either failure or unchanged: use old one when available
    if [ -f $oldcrl ];then
        cp -p ${datadir}/{$crl,$crlentries} .
    fi
done

# Create or copy over old CRL entries file
if [ $crlchanged = 1 ];then
    sort -u ${crlpfx}*${entriesext} > $allcrlentries
else
    cp -p ${datadir}/$allcrlentries .
fi

# keep track of whether new locals have been added
localchanged=0

# Temp file for local entries
entriestmp=$(mktemp ${revokedir}/tmp_${entriespfx}XXXXXX)

# Next add new revokes when applicable
cd $queuedir
for f in *;do
    # Check it is a valid number, first remove and 0x or 0X
    num=${f##0[xX]}
    # Check the remainder consists of 0-9a-fA-F
    if [ -n "${num//[0-9a-fA-F]/}" ];then
        warn "ignoring and removing invalid serial $f from $queuedir"
    else
        # Format the serial to be of the right OpenSSL length
        num=$(printf "%0$(((1+$(printf "%X" 0x$num|wc -c))/2*2))X\n" 0x$num)
        echo $num >> $entriestmp
        info "Found revocation request for serial 0x$num" 
        localchanged=1
    fi
    # Remove handled input file
    rm -f $f
done
cd $newdatadir

# Handle any local entries are added
if [ $localchanged = 1 ];then
    # merge old local entries file with the new one and remove those that
    # are also on one of the CRLs. Result will be new local entries file.
    sort -u $oldentries $entriestmp |\
        diff --changed-group-format="%<" \
             --unchanged-group-format="" \
             - $allcrlentries > $entries
    # recheck whether set of locals have changed
    if qdiff $oldentries $entries ; then
        info "After removing entries that are already on a CRL, there are no new entries on the entriesfile"
        localchanged=0
    fi
else
    # no new locals, if there are new CRLs, take the old locals and remove those
    # that are also on one of the CRLs. Result will be new local entries file.
    if [ $crlchanged = 1 ];then
        diff --changed-group-format="%<" \
             --unchanged-group-format="" \
             $oldentries $allcrlentries > $entries
        # recheck whether set of locals have changed
        if ! qdiff $oldentries $entries ; then
            info "One or more entries from the entriesfile is now on a CRL, entriesfile is changed"
            localchanged=1
        fi
    else
        # nothing new either way, just keep the old one
        cp -p $oldentries .
    fi
fi
rm -f $entriestmp


# Now check whether we've got something new
if [ -f $tarlatest -a -f $pubcrl -a $crlchanged -eq 0 -a $localchanged -eq 0 ]
then
    # Nothing changed
    debug "Nothing changed, leaving $tarlatest and $pubcrl unchanged"
    # Tidy up
    rm -rf $newdatadir

    # We're done
    exit 0
fi


# Check whether we need to create a new tarball
if [ ! -f $tarlatest -o $crlchanged -eq 1 -o $localchanged -eq 1 ];then
    tartmp=$(mktemp ${revokedir}/tmp_${tarpfx}XXXXXX.tar.gz)
    # Note: easier to do manual cd and rely on shell glob
    tar -zcf $tartmp ${crlpfx}*.pem ${entries}

    # Try to move the tmpfile into place for the backend
    chmod $perms $tartmp
    newtar=${revokedir}/${tarpfx}$(date +%Y%m%d%H%M%S).tar.gz
    if [ -f $newtar ];then
        # If it already exists, we most probably have two scripts running
        # simultaneously: warn, but just take the latest one.
        warn "new revoke file $newtar already exists, will overwrite..."
    fi
    mv -f $tartmp $newtar
    ln -sf $newtar $tarlatest
    notice "Symlink $tarlatest updated to point to new tarball $newtar"
fi


# Check whether we need to find a new CRL to publish
if [ ! -f $pubcrl -o $crlchanged -eq 1 ];then
    # initialize variables: defaults are the old one.
    # Note that pubcrl might not exist.
    pubcrlmax=$pubcrl
    # make sure oldpubcrlentries exists at least as empty file
    if [ ! -f $pubcrl ];then
        pubcrlnumber=0
    else
        pubcrlnumber=$(get_crlnumber $pubcrl)
    fi

    # find CRL with most new entries, and of those highest crlnumber
    extramax=0
    crlnumbermax=$pubcrlnumber
    for crl in ${crlpfx}*.pem ; do
        # get crlnumber
        crlnumber=$(get_crlnumber $crl)
        # get 'missing' and 'extra' w.r.t. the current public CRL
        get_missing_extra $oldpubcrlentries ${crl%.pem}${entriesext}

        # Only consider those CRLs that - w.r.t. our current public one - don't
        # miss certs (missing==0) and that have higher crlnumber than current
        # public crl (crlnumber>pubcrlnumber). We look for the maximum
        # entries (extra) and within that the highest crlnumber number.
        if [ $missing -eq 0 -a $crlnumber -gt $pubcrlnumber -a \
             $extra -ge $extramax ]
        then
            # Update when either the number of entries or the crlnumber (for
            # constant extra) is larger than the previous maximum.
            if [ $extra -gt $extramax -o $crlnumber -gt $crlnumbermax ];then
                pubcrlmax=$crl
                crlnumbermax=$crlnumber
                extramax=$extra
            fi
        fi
    done

    # have we found a better one?
    if [ "$pubcrlmax" != "$pubcrl" ];then
        # store the new CRL entries file in the new datadir
        cp -p ${pubcrlmax%.pem}${entriesext} $pubcrlentries
        # create an intermediary temp to atomically move the new CRL into place
        crltmp=$(mktemp ${revokedir}/tmp_${crlpfx}XXXXXX.pem)
        cp -p $pubcrlmax $crltmp
        chown root.root $crltmp
        chmod $perms $crltmp
        mv -f $crltmp $pubcrl
        notice "New public CRL published from $pubcrlmax"
    else
        # keep the old CRL entries file
        cp -p $oldpubcrlentries .
        debug "public CRL unchanged"
    fi
else
    # keep the old CRL entries file
    cp -p $oldpubcrlentries .
    debug "public CRL unchanged"
fi

# Remove old tar dir and move new one into place
cd $revokedir
rm -rf $datadir
mv $newdatadir $datadir
